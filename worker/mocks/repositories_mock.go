// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/repositories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "practice/whetherinfo/workers/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCity mocks base method
func (m *MockRepository) CreateCity(arg0 context.Context, arg1 models.Cities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCity indicates an expected call of CreateCity
func (mr *MockRepositoryMockRecorder) CreateCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockRepository)(nil).CreateCity), arg0, arg1)
}

// GetCity mocks base method
func (m *MockRepository) GetCity(arg0 context.Context, arg1 string) (*models.Cities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCity", arg0, arg1)
	ret0, _ := ret[0].(*models.Cities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCity indicates an expected call of GetCity
func (mr *MockRepositoryMockRecorder) GetCity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCity", reflect.TypeOf((*MockRepository)(nil).GetCity), arg0, arg1)
}
